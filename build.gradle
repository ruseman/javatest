apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'

repositories {
  mavenCentral()
}

group = "xyz.voxio"
archivesBaseName = 'javatest'
version = '0.1.0'
sourceCompatibility = 1.6
targetCompatibility = 1.6
mainClassName = "xyz.voxio.jtest.JTest"
applicationDefaultJvmArgs = ["-Dgreeting.language=en"]
applicationName = "Java Test"

configurations {
    provided
}

compileJava {
    sourceSets.main.compileClasspath += configurations.provided
}

run {
    classpath += configurations.provided
}

eclipse{
	classpath{
		plusConfigurations += [configurations.provided]
	}
}

dependencies {
	provided (group: 'com.google.guava', name: 'guava', version: '12.0'){
		transitive = false
	}
	provided ('com.google.code.gson:gson:2.3'){
		transitive = false
	}
}

task sourceJar(type: Jar) {
    from sourceSets.main.java
    classifier = 'src'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
    from javadoc.destinationDir
}

jar {
	dependsOn configurations.runtime
	from{
		configurations.provided.collect{
			it.isDirectory()?it:zipTree(it)
		}
	}{
		exclude "META-INF/*.SF"
		exclude "META-INF/*.DSA"
		exclude "MEFA-INF/*.RSA"
	}
}

artifacts{
	archives sourceJar
	archives javadocJar
}

task copyLicense {
    outputs.file new File("$buildDir/LICENSE.md")
    doLast {
        copy {
            from "LICENSE.md"
            into "$buildDir"
        }
    }
}

task copyReadme {outputs.file new File("$buildDir/README.md")
    doLast {
        copy {
            from "README.md"
            into "$buildDir"
        }
    }
}
 
applicationDistribution.from(copyLicense) {
    into ""
}

applicationDistribution.from(copyReadme){
	into ""
}

String findJavacExecutable() {
    File javaHome = new File( System.getProperty( "java.home" ) )
    if( javaHome.getName().equals( "jre" ) ) {
        javaHome = javaHome.getParentFile()
    }
    if( javaHome.getName().startsWith( "jdk${sourceCompatibility}" ) ) {
        return null
    }
    File installDir = javaHome.getParentFile();
    for( File file : installDir.listFiles() ) {
        if( file.getName().startsWith( "jdk${sourceCompatibility}" ) ) {
            return new File( file, "bin/javac" ).getAbsolutePath()
        }
    }
    println "Warning: javac executable for ${sourceCompatibility} was not found."
    return null
}
task findJavac {
    description '===  find and set the javac executable for the given sourceCompatibility ==='
    compileJava.dependsOn(findJavac)
    doLast {
        String executable = findJavacExecutable()
        if( executable != null ) {
            println "\tjavac: ${executable}"
            compileJava.options.fork = true
            compileJava.options.forkOptions.executable = executable
        }
    }
}